# Generated by DeekSeek

import h5py
import numpy as np
from typing import List, Optional, Union

def remove_hdf5_rows(
    filepath: str,
    n_rows: int,
    target_paths: Optional[List[Union[str, tuple]]] = None,
    exclude_paths: Optional[List[str]] = None,
    verbose: bool = True
) -> None:
    """
    删除HDF5文件中指定表格或路径下所有表格的前N行
    
    参数:
        filepath: HDF5文件路径
        n_rows: 要删除的行数
        target_paths: 要处理的目标路径列表，可以是:
            - 字符串: 具体表格路径(如'/data/table1')或文件夹路径(如'/group/')
            - 元组: (路径, 是否递归) 如('/group/', True)
        exclude_paths: 要排除的路径列表
        verbose: 是否显示处理详情
    
    示例用法:
        # 删除特定表格的前5行
        remove_hdf5_rows("data.h5", 5, ["/experiment/results"])
        
        # 递归删除/sensors/下所有表格的前3行
        remove_hdf5_rows("data.h5", 3, ["/sensors/"])
        
        # 删除多个路径下的表格(混合具体表格和文件夹)
        remove_hdf5_rows("data.h5", 10, [
            "/experiment/results",  # 具体表格
            ("/sensors/", True),    # 递归处理
            ("/temp_data", False)   # 不递归
        ])
    """
    def printv(*args, **kwargs):
        if verbose:
            print(*args, **kwargs)

    def should_process(path: str) -> bool:
        """判断路径是否应该被处理"""
        # 检查排除路径
        if exclude_paths and any(path.startswith(p.rstrip('/')) for p in exclude_paths):
            return False
        
        # 如果没有指定target_paths，则处理所有数据集
        if target_paths is None:
            return True
            
        # 检查是否匹配任何目标路径规则
        for rule in target_paths:
            if isinstance(rule, str):
                # 字符串规则: 完全匹配或前缀匹配
                if path == rule or path.startswith(rule.rstrip('/') + '/'):
                    return True
            elif isinstance(rule, tuple) and len(rule) == 2:
                path_part, recursive = rule
                path_part = path_part.rstrip('/')
                if recursive and path.startswith(path_part + '/'):
                    return True
                elif not recursive and (path == path_part or 
                                      path.startswith(path_part + '/') and 
                                      '/' not in path[len(path_part)+1:]):
                    return True
        return False

    with h5py.File(filepath, 'a') as f:
        # 收集所有需要处理的表格路径
        targets = []
        
        def collect_tables(name, obj):
            if isinstance(obj, h5py.Dataset) and should_process(name):
                targets.append(name)
        
        f.visititems(collect_tables)
        
        if not targets:
            printv("没有找到可处理的表格")
            return

        # 处理每个表格
        for table_path in targets:
            try:
                dataset = f[table_path]
                orig_shape = dataset.shape
                
                if len(dataset) <= n_rows:
                    printv(f"跳过 {table_path} (行数不足: {len(dataset)} <= {n_rows})")
                    continue
                
                # 读取数据(跳过前n_rows行)
                new_data = dataset[n_rows:]
                
                # 保存属性
                attrs = dict(dataset.attrs)
                
                # 删除原数据集
                del f[table_path]
                
                # 创建新数据集
                new_dataset = f.create_dataset(table_path, data=new_data)
                
                # 恢复属性
                for name, value in attrs.items():
                    new_dataset.attrs[name] = value
                
                printv(f"处理成功 {table_path}: {orig_shape} → {new_data.shape}")
                
            except Exception as e:
                printv(f"处理 {table_path} 失败: {str(e)}")
                continue

    printv(f"处理完成! 共处理了 {len(targets)} 个表格")
    
def print_hdf5_structure(filepath):
    with h5py.File(filepath, 'r') as f:
        print(f"文件结构: {filepath}")
        def print_item(name, obj):
            indent = '  ' * name.count('/')
            if isinstance(obj, h5py.Dataset):
                print(f"{indent}📊 数据集: {name} (形状: {obj.shape}, 类型: {obj.dtype})")
            elif isinstance(obj, h5py.Group):
                print(f"{indent}📁 组: {name}")
        f.visititems(print_item)

# 替换为您的实际文件路径


# 使用示例
if __name__ == "__main__":
    # 示例1: 递归删除/sensors/下所有表格的前3行
    # remove_hdf5_rows("data.h5", 3, ["/sensors/"])
    
    demo_invalid_num = [23,37,13,16,59,    41,19,38,15,14]
    
    for index, value in enumerate(demo_invalid_num):
        print(f"data_{index} delete {value} row")
        # 示例2: 混合模式处理
        target_paths = [        
            f'data/demo_{index}/actions',
            f'data/demo_{index}/joint_actions',
            (f'data/demo_{index}/obs/', True),        # 该文件夹下所有表格(递归)
            (f'data/demo_{index}/states/', True),
        ]

        remove_hdf5_rows("/mnt/data/src/edit_hdf5/dataset_record_pick_place_post_process.hdf5", 
                         value, 
                         target_paths=target_paths,)
    
    # 示例3: 处理文件中所有表格(除/system/下的)
    # remove_hdf5_rows("data.h5", 10, exclude_paths=["/system/"])
    
    # print_hdf5_structure("/mnt/data/src/edit_hdf5/dataset_record_pick_place_post_process.hdf5")
